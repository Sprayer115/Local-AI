# Playbook zur Installation und Konfiguration von OpenWebUI mit Docker Compose
# Abhängig vom docker.yml Playbook

- name: OpenWebUI Installation und Konfiguration
  hosts: llm_servers
  become: true

  vars:
    openwebui_dir: "/opt/openwebui"
    openwebui_port: 3000
    ollama_api_base_url: "http://172.18.0.1:11434" # Standard-Ollama-URL, kann überschrieben werden (docker out)

  tasks:
    # Voraussetzung überprüfen - Docker sollte installiert sein
    - name: Überprüfen, ob Docker installiert ist
      command: docker --version
      register: docker_check
      failed_when: docker_check.rc != 0
      changed_when: false
      ignore_errors: true

    # Docker installieren, falls nicht verfügbar
    - name: Docker-CLI und Docker Compose installieren (falls in Container)
      block:
        - name: APT-Update durchführen
          apt:
            update_cache: yes
            
        - name: Docker-CLI und Docker Compose installieren
          apt:
            name:
              - docker.io
              - docker-compose
            state: present
      when: docker_check is failed

    # Voraussetzung überprüfen - Ollama sollte installiert sein
    - name: Überprüfen, ob Ollama installiert ist
      command: ollama -v
      register: ollama_check
      failed_when: ollama_check.rc != 0
      changed_when: false
      ignore_errors: false

    # Verzeichnisstruktur erstellen
    - name: Verzeichnis für OpenWebUI erstellen
      file:
        path: "{{ openwebui_dir }}"
        state: directory
        mode: '0755'

    # docker-compose.yml Datei kopieren und anpassen
    - name: Docker Compose Datei für OpenWebUI erstellen
      template:
        src: ../../../docker/openwebui/openwebui-docker-compose.yml.j2
        dest: "{{ openwebui_dir }}/docker-compose.yml"
        mode: '0644'
      register: compose_file_result
      
    - name: Docker Compose Konfiguration anzeigen
      debug:
        msg: "Docker Compose wird mit folgender Konfiguration erstellt: Port {{ openwebui_port }}, Ollama API URL: {{ ollama_api_base_url }}"

    # .env Datei erstellen
    - name: Umgebungsvariablen für OpenWebUI erstellen
      copy:
        content: |
          OPEN_WEBUI_PORT={{ openwebui_port }}
          OLLAMA_API_BASE_URL={{ ollama_api_base_url }}
        dest: "{{ openwebui_dir }}/.env"
        mode: '0644'

    # Prüfen, ob wir in einer Docker-Container-Umgebung sind
    - name: Prüfen, ob in Docker-Container ausgeführt
      stat:
        path: /.dockerenv
      register: dockerenv
      
    # Docker Socket im Container prüfen
    - name: Docker Socket Zugriff prüfen
      stat:
        path: /var/run/docker.sock
      register: docker_sock
      
    # Docker Compose ausführen (in normaler Umgebung oder im Container mit eigenem Docker)
    - name: Docker Compose für OpenWebUI starten
      shell: "cd {{ openwebui_dir }} && docker compose up -d"
      register: docker_compose_output
      when: not dockerenv.stat.exists or (dockerenv.stat.exists and docker_sock.stat.exists and docker_sock.stat.issock)

    # Nur Meldung ausgeben (wenn in Test-Container ohne Docker-Socket)
    - name: Hinweis bei Docker-in-Docker-Szenario
      debug:
        msg: "Wir befinden uns in einer Docker-Container-Umgebung. Docker Compose wird nur simuliert für Testzwecke."
      when: dockerenv.stat.exists and (not docker_sock.stat.exists or not docker_sock.stat.issock)

    - name: Docker-Compose-Datei wurde erstellt (Test-Hinweis)
      debug:
        msg: "Docker-Compose-Datei wurde erfolgreich erstellt unter {{ openwebui_dir }}/docker-compose.yml"
      when: dockerenv.stat.exists and (not docker_sock.stat.exists or not docker_sock.stat.issock)

    - name: Docker Compose Ausgabe anzeigen
      debug:
        var: docker_compose_output.stdout_lines
      when: docker_compose_output is defined and docker_compose_output.stdout_lines is defined

    # Container-Status prüfen (wenn Docker verfügbar ist)
    - name: OpenWebUI-Container-Status überprüfen
      shell: "docker ps --filter 'name=open-webui' --format '{{.Status}}'"
      register: container_status
      ignore_errors: yes
      when: not dockerenv.stat.exists or (dockerenv.stat.exists and docker_sock.stat.exists and docker_sock.stat.issock)
      
    # Container-Port prüfen
    - name: OpenWebUI-Container-Port auslesen
      shell: "docker port open-webui | grep '8080/tcp' | awk -F':' '{print $NF}'"
      register: container_port
      ignore_errors: yes
      when: not dockerenv.stat.exists or (dockerenv.stat.exists and docker_sock.stat.exists and docker_sock.stat.issock)
      
    # Debug-Ausgabe für Docker-Status
    - name: Docker-Status anzeigen
      debug:
        msg:
          - "Docker-Container-Status gefunden: {{ container_status.stdout | default('Nicht verfügbar') }}"
          - "Docker-Container-Port gefunden: {{ container_port.stdout | default('Nicht verfügbar') }}"
      when: not dockerenv.stat.exists or (dockerenv.stat.exists and docker_sock.stat.exists and docker_sock.stat.issock)
    
    # Verfügbarkeit auf dem tatsächlichen Port prüfen
    - name: Verfügbarkeit prüfen
      wait_for:
        host: localhost
        port: "{{ container_port.stdout | default(openwebui_port) }}"
        state: started
        timeout: 60
      register: service_check
      ignore_errors: yes
      when: not dockerenv.stat.exists or (dockerenv.stat.exists and docker_sock.stat.exists and docker_sock.stat.issock)

    - name: Status anzeigen (normale Umgebung)
      debug:
        msg: "OpenWebUI wurde erfolgreich gestartet und ist auf Port {{ container_port.stdout | default(openwebui_port) }} erreichbar. Container-Status: {{ container_status.stdout | default('Unbekannt') }}"
      when: service_check is defined and service_check.failed is not defined and container_status is defined

    - name: Status anzeigen (Test-Umgebung ohne Docker-Socket)
      debug:
        msg: "Test erfolgreich: OpenWebUI-Konfiguration wurde erfolgreich simuliert"
      when: dockerenv.stat.exists and (docker_sock.stat.exists is not defined or not docker_sock.stat.exists or not docker_sock.stat.issock)
      
    - name: Status anzeigen (Test-Umgebung mit Docker-Socket)
      debug:
        msg: "Docker-in-Docker: OpenWebUI wurde in Container-Umgebung mit Docker-Socket gestartet und ist auf Port {{ container_port.stdout | default(openwebui_port) }} erreichbar. Container-Status: {{ container_status.stdout | default('Unbekannt') }}"
      when: dockerenv.stat.exists and docker_sock.stat.exists and docker_sock.stat.issock and container_status is defined
